generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name     String
  email    String @unique
  password String

  description String @default("")
  phone       String @default("")
  age         String @default("")
  form        String @default("")
  faculty     String @default("")
  direction   String @default("")
  number      String @default("")
  group       String @default("")
  year        String @default("")

  avatar       String?
  topics       Topic[]
  topicsLikes  TopicLike[]
  comments     Comment[]
  commentLikes CommentLike[]

  permissions UserPermission[]
  createdAt   DateTime         @default(now())
}

enum UserPermission {
  BLOCK_TOPICS
  ALL
}

model Topic {
  id           String @id @default(uuid())
  serialNumber Int    @unique @default(autoincrement())

  title       String
  description String
  discipline  String
  teacher     String
  images      String[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  topicsLikes TopicLike[]
  comments    Comment[]

  createdAt DateTime  @default(now())
  blockedAt DateTime?
}

model TopicLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([topicId, userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связь с автором комментария
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  // Связь с темой
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])

  // Связь с родительским комментарием (для ответов)
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  // Лайки комментария
  commentLikes CommentLike[]

  // Флаг удаления (мягкое удаление)
  deletedAt DateTime?
}

model CommentLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Связь с комментарием
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  // Связь с пользователем
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([commentId, userId])
}
