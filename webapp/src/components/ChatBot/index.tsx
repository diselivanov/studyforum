import { useState, useRef, useEffect } from 'react'
import css from './index.module.scss'
import FallingElements from '../FallingElements'

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState([])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef(null)

  const predefinedResponses = {
    '–æ —Å–∞–π—Ç–µ': '–≠—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–±-—Å–∞–π—Ç —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.',
    –ø—Ä–∞–≤–∏–ª–∞:
      '1. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã\n2. –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n3. –ù–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ —Å–ø–∞–º\n4. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å': 'feedback',
  }

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const addMessage = (text, isBot = false) => {
    setMessages((prev) => [...prev, { text, isBot, id: Date.now() }])
  }

  const simulateTyping = (response, delay = 2000) => {
    setIsTyping(true)
    setTimeout(() => {
      setIsTyping(false)
      addMessage(response, true)
    }, delay)
  }

  const handleBadgeClick = (badgeType) => {
    addMessage(badgeType, false)

    if (badgeType === '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å') {
      simulateTyping('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:')
    } else {
      simulateTyping(predefinedResponses[badgeType])
    }
  }

  const handleSendMessage = () => {
    if (!inputValue.trim()) return

    const userMessage = inputValue.trim()
    addMessage(userMessage, false)
    setInputValue('')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const lastBotMessage = messages.filter((msg) => msg.isBot).pop()

    if (lastBotMessage?.text === '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:') {
      simulateTyping('–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.', 800)
    } else {
      simulateTyping('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.', 600)
    }
  }

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSendMessage()
    }
  }

  const handleChatToggle = () => {
    setIsOpen(!isOpen)
    if (!isOpen && messages.length === 0) {
      simulateTyping('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', 500)
    }
  }

  return (
    <div className={css.chatbotContainer}>
      {/* –ß–∞—Ç –æ–∫–Ω–æ */}
      {isOpen && (
        <div className={css.chatWindow}>
          <div className={css.chatHeader}>
            <h3 className={css.chatTitle}>–ß–∞—Ç-–±–æ—Ç</h3>
            <button className={css.closeButton} onClick={() => setIsOpen(false)}>
              √ó
            </button>
          </div>

          <div className={css.messagesContainer}>
            {messages.map((message) => (
              <div key={message.id} className={`${css.message} ${message.isBot ? css.botMessage : css.userMessage}`}>
                <div className={css.messageContent}>
                  {message.text.split('\n').map((line, index) => (
                    <div key={index}>{line}</div>
                  ))}
                </div>
              </div>
            ))}

            {isTyping && (
              <div className={`${css.message} ${css.botMessage}`}>
                <div className={css.typingIndicator}>
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          <div className={css.badgesContainer}>
            <button className={css.badge} onClick={() => handleBadgeClick('–æ —Å–∞–π—Ç–µ')}>
              –û —Å–∞–π—Ç–µ
            </button>
            <button className={css.badge} onClick={() => handleBadgeClick('–ø—Ä–∞–≤–∏–ª–∞')}>
              –ü—Ä–∞–≤–∏–ª–∞
            </button>
            <button className={css.badge} onClick={() => handleBadgeClick('–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')}>
              –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            </button>
            <FallingElements />
          </div>

          <div className={css.inputContainer}>
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              className={css.messageInput}
            />
            <button onClick={handleSendMessage} disabled={!inputValue.trim()} className={css.sendButton}>
              ‚Üó
            </button>
          </div>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ */}
      <button className={css.chatToggle} onClick={handleChatToggle}>
        {isOpen ? '√ó' : 'ü§ñ'}
      </button>
    </div>
  )
}

export default ChatBot
